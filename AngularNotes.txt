Component
The @Component decorator tells Angular that this function/ES6 Class is an Angular Component, 
not just a regular function. It injects meta data into the classÂ 
Component Properties:
selector - Creates the HTML tag for the component
template - The HTML content for the component (inline)
templateUrl - The HTML content for the component in a separate file

NgModules
@NgModule decorator tells Angular that the current module is an NgModule
NgModule Properties:
bootstrap - Only on the root module's decorator. The root module instantiates the Angular
app. Its an array of Components to tell Angular what components to bootstrap. Usually 
it's just one, the Root App Component
declarations -  This is where you register components with a certain module
imports - List of modules you are importing into this module

Imports in the root module:
BrowserModule: If you are building an Angular app in the browser, you need this
CommonModule: Useful when declaring directives

Bootstrapping in main
PlatformBrowserDyanmic - This import allows you to compile your app in the browser (client side)

Interpolation
In the template you can write an expression consisting of properties from the class wrapped in
curly braces
{{ title }}

Property Binding
Wrap an HTML attribue in hard brackets [] for a one way data Binding. 
<img [src]="logo"></img>
where logo is some property in your component with a string value

Event Binding
Wrap HTML events in parentheses () for event Binding
<div (click)="someFn"></div>
<input (blur)="handleBlur($event)">
[ngModel]="property" Talks with the HTML element you put it on. Essentially [value]
(ngModelChange)="fn($event)" Event binding on the model property
Essentially we are one way databinding with ngModel, then when a change event occurs, call the
listener and update the property value.
This ngModel/ngModelChange combo is basically two way data binding. To make the syntax shorter:

Two Way Data Binding
[(ngModel)]='property'

Template Ref
Create a reference to a HTML DOM node and make it accessible anywhere in the template
Make a ref by using # followed by the name
<input type="text #username>
Access it in DOM anywhere
<button (click)="someFn(username.value)"></button>

*ngIf
Conditionally show DOM nodes
<div *ngIf="name.length > 2"></div>
Angular creates Web Components from the components you create. This means that all
HTML you write is taken and placed inside <template></template> tags in the DOM. 
The * in the ngIf is syntactic sugar. It makes it so we don't have to write the
content in <template> tags, but let Angualr do it for us. the [ngIf] property 
binding actually sits on the <template> tag above all the rest of the code. 
<template [ngIf]="name.length > 2">
    <div>..</div>
</template>

*ngFor
<li *ngFor="let passenger of passengers; let i = index;">
    {{ i }}: {{ passenger.fullname }}
</li>
Angular turns this syntactic sugar into web components like this:
<template ngFor let-passenger let-i="index" [ngForOf]="passengers">
    <li>
        {{ i }}: {{ passenger.fullname }}
    </li>
</template>

Class Bindings
<span 
    class="status"
    [class.checked-in]="passenger.checkedIn"
></span>
Here we have class property one way binding. It adds the 'checked-in' class
to the span if passenger.checkedIn is true

<span 
    class="status"
    [ngClass]="{ 
        'checked-in': passenger.checkedIn ,
        'checked-out': !passenger.checkedIn
    }"
></span>
Here we are using ngClass property binding. We can now have multiple classes on an 
element. You can specify an object where the keys are the css classes you want to 
add and the value is boolean values


Style Bindings
 <span 
    class="status"
    [style.backgroundColor]="(passenger.checkedIn ? '#2ecc71' : '#c0392b')"
></span>
<span 
    class="status"
    [ngStyle]="{
        backgroundColor: (passenger.checkedIn ? '#2ecc71' : '#c0392b')
    }"
></span>

Pipes
A pipe is just a function that returns something new. It is a data transformation
function
<p>{{ passenger | json }}</p>
You can even pipe multiple pipes:
(passenger.checkInDate | date: 'yMMMd' | uppercase)

Safe Navigation Operator
{{ passenger.children?.length}}
If children exists, then continue to the property length

Importing an NgModule
When you are importing a custom NgModule that you made, it is important to remember a couple things
First, you have to add the custom module to your root module's imports list
Second, in your custom module, remember to declare all Components that module uses in Declarations array
as well as exporting the components you want to be public in the Exports array. 

ngOnInit
Lifecycle hook that gets called when Angular initializes the component. 

ngOnChanges
Lifecycle hook that gets called before ngOnInit, and returns an object with the 
current value and previous values of the data being sent into the component

Dependency Injection 
Any class you want to inject dependencies into, you have to mark as Injectable() 
@Injectable()
export class SomeClass {
    constructor(private http: Http)
    ...
}
This tells Angular that this class is able to have other modules be injected into it
Services without dependencies can be sent through the constructor without @Injectable()
but that is bad practice. Any data that is being injected from a Provider, must have 
@Injectable();

HTTP Get Requests with Observables
The call http.get(/path/to/api) returns an Observable response. We need to iterate over
the response using the RXJS map function. 
http.get()
.map((response: Response) => response.json())
For each data that is returned in the Observable, we convert it into json format.
All this code is wrapped in a function: 
getData() {
    http.get().map()
}
When we call get data we are returned an Observable. We can then subscribe to the data
from the Observable. 
getData().subscribe((data) => ...)
In the subscribe call, we get the data back as a callback. 

ngForm
<form #form="ngForm" novalidate>
The ngForm directive allows Angular to manage this form and all state changes/validation 
from it's children. 
novalidate makes it so the form doesn't autovalidate from the browser's native valdiation
but instead use Angular's validation. 
Inside an ngForm, the values for the form are stored from the name attribute of html elements
For example:
<input
    type="text"
    name="myName"
    [ngModel]="obj.val">
Here, myName will be a key in the ngForm's object of values. It's value is binded to ngModel, 
which is one-way data bound to an object's value. The ngModel is local to the DOM element
obj.val is the initial value for the ngModel. 
Form Validation
Example: 
<input 
    type="text"
    name="id"
    required
    #id="ngModel"
    [ngModel]="someObj.property">
Here we are using a template ref to get a reference to the input. We are exporting the ngModel and
setting our reference equal to it so we can expose the ngModel properties. 
To get the properties we can do: 
id.errors, id.dirty, id.errors.required. 
Similarly, with the form template ref above, form.valid, form.invalid
Then you can show/hide error messages by using ngIf="id.errors". If id.errors exists it has an object
otherwise it's value is null. 
Form Submission
<form (ngSubmit)="handleSubmit(form.value, form.valid)" #form="ngForm">
Since we are using a template ref for the form, we can just pass the entire form object into the
handleSubmit function, or you can just pass specific values like form.value or form.valid

Routing
import the modules: import { RouterModule, Routes } from '@angular/router';
Import in module like 
imports: [
    RouterModule.forRoot(routes),
]
Where routes is an array of Route objects
const routes: Route = [
    { path: '', component: SomeComponent, pathMatch: 'full' }
]
So when the route matches '' entirely, show the SomeComponent
Wildcard routes, routes that don't match any of the ones in the array can be made possible with:
{ path: '**'}
Redirects are made by removing the component property in the route with
{ path: '', redirectTo: '/somePath'} 
To show the right component, we need to add a directive called router-outlet:
<router-outlet></router-outlet>
This is essentially a container, exposed from the RouterModule, that will be where
we inject components inside of. 
Navigation is made possible with the routerLink property:
<a 
    routerLink="/"
    routerLinkActive="active"
    [routerLinkActiveOptions]="{exact: true}">
    Home
</a>
routerLink - sets the path to go to
routerLinkActive - Adds the "active" class when it this route is active
routerLinkActiveOptions - Bind an options object to this property. Here the object has the 
exact property which will set this path active only if the route exactly matches this path
Imperatively route: 
this.router.navigate(['/passengers', passenger.id]);
Once you've injected the router into the class, 
    constructor(private router: Router) 
you can use the navigate function to route using code instead of routerLink attribute. 

Content Projection
<my-custom-component>
    <h1>Custom Content Here</h1>
</my-custom-component>
Then in the template of my-custom-component
template: `
<div><ng-content></ng-content></div>
`
You can even project custom components. 
<my-custom-component>
    <another-custom-component (event)="handleEvent($event)">
    </another-custom-component>
</my-custom-component>
Injection Slots
<ng-content select="h1"></ng-content>
If you have a lot of DOM nodes that you want to project, 
You can specify which DOM node to place to a specific ng-content.
select works like querySelector, so you can have 'h3.class', '#myID', '.a-class'

@ContentChild
<A>
 <B (event)="handleEvent($event)">
 </B>
</A>

A.html
<div>
 <ng-content select="B"></ng-content>
</div>

Anything inside the tags of A is considered a ContentChild of A. So in this case, B is a 
content child of A. Inside of component A, you might want to get some of the data from 
it's child, Component B (such as event outputs). But all you have is a ng-content projection
 of B. We can get a reference to component B to query it, using @ContentChild and the ng Lifecycle
 hook: AfterContentInit. 

export class A implements AfterContentInit {
    @ContentChild(B) myBComponent: B; 
    ngAfterContentInit() {
        console.log(B); 
    }
}
We define the @ContentChild annotation, pass in the B component to it, and define a variable
myBComponent of type B. Now, once B is initialized in the dom (injected inside the ng-content)
we can get access to it's values. If it has an Output event, we can subscribe to it's output:
this.myBComponent.theOutputEvent.subscribe((valueOfOutput) => console.log(valueOfOutput));

@ContentChildren
Works just like @ContentChild, but this time you get a list of all the content child's you 
specify. 
@ContentChildren(B) myBComponents: QueryList<B>
So myBComponents is a QueryList of B components. You can perform actions on it such as:
myBComponents.map((b) => console.log(b));

@ViewChild
Declaring this works just like @ContentChild:
@ViewChild(BComponent) b: BComponent; 
The difference between ViewChild and ContentChild is that content child is templates that
have been projected into the current component. And ViewChild is templates that exists
on the current component itself. 
<A>
    <B>
    </B>
</A>
A.html:
<div>
    <ng-content></ng-content>
    <button></button>
</div>
Inside the A component class, B is a ContentChild. All the HTML for the A component is a 
ViewChild of A. So, button and ng-content is a ViewChild. 

@ViewChildren
Works similarly to @ContentChildren, but for ViewChilds. 
ViewChildren are not available at ngAfterContentInit, but are instead available at
ngAfterViewInit. If you modify the data of a ViewChild inside ngAfterViewInit(), 
for example setting a property on a ViewChild to a new value, Angular will throw an 
error. This is because it goes against one way data flow. You are essentially updating 
a View's data after it's already been initialized. The data should be set before the
view is initialized. In dev mode you can inject ChangeDector module, and call detectChanges()
function to notify angular to detect those changes to the ViewChild. You don't need to do 
this in production though. 

ElementRefs 
<button #myBtn></button>
@ViewChild('myBtn') myButtonElement: ElementRef;
Query your template using template refs and ViewChild to get the ref. 
myButtonElement.nativeElement gives you access to all the native DOM APIs. 
myButtonElement.nativeElement.classList.add('someClass);

NativeElement works on the Web but Angular can also deploy to mobile. So to make your code
platform agnostic, you can inject the Renderer (from angular/core). 
Renderer has functions such as myButtonElement.setElementAttribtue, setElementClass, invokeElementMethod()

ViewContainerRef
ViewChild's don't just have to return ElementRefs. They can also return ViewContainerRef. This is exaclty
as it sounds, a reference to a view container. 
@ViewChild('myDiv', { read: ViewContainerRef }) mydiv: ViewContainerRef;
You add the read parameter so it knows to read it as a ViewContainerRef instead of ElementRef.
You can create a component dynamically by: 
this.mydiv.createComponent();
createComponent() takes in a ComponentFactory, which is obtained by a ComponentFactoryResolver.
After injecting Resolver (angular/core), you can make a ComponentFactoryResolver by: 
componentFactory = resolver.resolveComponentFactory(someComponent);
myNewComponent = this.mydiv.createComponent(componentFactory);
Essentially this is what you're doing:
1. Grab a reference to a ViewContainer (myDiv);
2. Make a Factory, which is a function that creates other objects. This factory makes components
3. Make a component with this factory
In Dynamic Components, you can access the properties by:
this.myNewComponent.instance.someProperty
this.myNewComponent.instance.someEvent.subscribe(() => {})

Component Definitions
You can create a property to have a type of a specific component
myComponent: ComponentRef<Comp>
where Comp is a Custom Component. ComponentRef from angular/core

TemplateRef
<template #tmpl let-name>
    {{ name }}
</template>
@ViewChild('tmpl) templ: TemplateRef<any>
Inject a template:
<ng-container
    [ngTemplateOutlet]="tmpl"
    [ngTemplateOutletContext]="{ name: Sunny }">
</ng-container>
or use ViewContainerRef.createEmbeddedView(tmpl, { name: 'Sunny' })
