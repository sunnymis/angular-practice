Component
The @Component decorator tells Angular that this function/ES6 Class is an Angular Component, 
not just a regular function. It injects meta data into the classÂ 
Component Properties:
selector - Creates the HTML tag for the component
template - The HTML content for the component (inline)
templateUrl - The HTML content for the component in a separate file

NgModules
@NgModule decorator tells Angular that the current module is an NgModule
NgModule Properties:
bootstrap - Only on the root module's decorator. The root module instantiates the Angular
app. Its an array of Components to tell Angular what components to bootstrap. Usually 
it's just one, the Root App Component
declarations -  This is where you register components with a certain module
imports - List of modules you are importing into this module

Imports in the root module:
BrowserModule: If you are building an Angular app in the browser, you need this
CommonModule: Useful when declaring directives

Bootstrapping in main
PlatformBrowserDyanmic - This import allows you to compile your app in the browser (client side)

Interpolation
In the template you can write an expression consisting of properties from the class wrapped in
curly braces
{{ title }}

Property Binding
Wrap an HTML attribue in hard brackets [] for a one way data Binding. 
<img [src]="logo"></img>
where logo is some property in your component with a string value

Event Binding
Wrap HTML events in parentheses () for event Binding
<div (click)="someFn"></div>
<input (blur)="handleBlur($event)">
[ngModel]="property" Talks with the HTML element you put it on. Essentially [value]
(ngModelChange)="fn($event)" Event binding on the model property
Essentially we are one way databinding with ngModel, then when a change event occurs, call the
listener and update the property value.
This ngModel/ngModelChange combo is basically two way data binding. To make the syntax shorter:

Two Way Data Binding
[(ngModel)]='property'

Template Ref
Create a reference to a HTML DOM node and make it accessible anywhere in the template
Make a ref by using # followed by the name
<input type="text #username>
Access it in DOM anywhere
<button (click)="someFn(username.value)"></button>

*ngIf
Conditionally show DOM nodes
<div *ngIf="name.length > 2"></div>
Angular creates Web Components from the components you create. This means that all
HTML you write is taken and placed inside <template></template> tags in the DOM. 
The * in the ngIf is syntactic sugar. It makes it so we don't have to write the
content in <template> tags, but let Angualr do it for us. the [ngIf] property 
binding actually sits on the <template> tag above all the rest of the code. 
<template [ngIf]="name.length > 2">
    <div>..</div>
</template>

*ngFor
<li *ngFor="let passenger of passengers; let i = index;">
    {{ i }}: {{ passenger.fullname }}
</li>
Angular turns this syntactic sugar into web components like this:
<template ngFor let-passenger let-i="index" [ngForOf]="passengers">
    <li>
        {{ i }}: {{ passenger.fullname }}
    </li>
</template>

Class Bindings
<span 
    class="status"
    [class.checked-in]="passenger.checkedIn"
></span>
Here we have class property one way binding. It adds the 'checked-in' class
to the span if passenger.checkedIn is true

<span 
    class="status"
    [ngClass]="{ 
        'checked-in': passenger.checkedIn ,
        'checked-out': !passenger.checkedIn
    }"
></span>
Here we are using ngClass property binding. We can now have multiple classes on an 
element. You can specify an object where the keys are the css classes you want to 
add and the value is boolean values


Style Bindings
 <span 
    class="status"
    [style.backgroundColor]="(passenger.checkedIn ? '#2ecc71' : '#c0392b')"
></span>
<span 
    class="status"
    [ngStyle]="{
        backgroundColor: (passenger.checkedIn ? '#2ecc71' : '#c0392b')
    }"
></span>

Pipes
A pipe is just a function that returns something new. It is a data transformation
function
<p>{{ passenger | json }}</p>
You can even pipe multiple pipes:
(passenger.checkInDate | date: 'yMMMd' | uppercase)

Safe Navigation Operator
{{ passenger.children?.length}}
If children exists, then continue to the property length

Importing an NgModule
When you are importing a custom NgModule that you made, it is important to remember a couple things
First, you have to add the custom module to your root module's imports list
Second, in your custom module, remember to declare all Components that module uses in Declarations array
as well as exporting the components you want to be public in the Exports array. 

ngOnInit
Lifecycle hook that gets called when Angular initializes the component. 
